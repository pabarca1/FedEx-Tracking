<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FedEx Bulk Status Checker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .gradient-bg {
            background-image: linear-gradient(to right, #4c51bf, #667eea);
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white p-6 md:p-8 rounded-2xl shadow-xl w-full max-w-2xl border border-gray-200">
        <div class="flex items-center justify-center mb-6">
            <svg class="h-10 w-10 text-gray-800" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"></path>
                <path fill-rule="evenodd" d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v10a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 5a1 1 0 011-1h6a1 1 0 110 2H8a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H8z" clip-rule="evenodd"></path>
            </svg>
            <h1 class="text-3xl md:text-4xl font-bold text-gray-800 ml-3">Bulk Status Checker</h1>
        </div>

        <p class="text-center text-gray-600 mb-6">Enter FedEx tracking numbers below, one per line.</p>

        <textarea id="trackingNumbers" class="w-full h-40 p-4 border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-200 text-gray-800" placeholder="Enter tracking numbers here..."></textarea>

        <div id="message-box" class="mt-4 p-3 rounded-lg text-sm hidden"></div>

        <button id="checkButton" class="w-full mt-4 py-3 px-6 gradient-bg text-white font-semibold rounded-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Check Status
        </button>

        <div id="results" class="mt-6 border-t-2 pt-6 border-gray-200 hidden">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-2xl font-bold text-gray-800">Results</h2>
                <button id="copyButton" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg text-sm font-medium hover:bg-gray-300 transition duration-200">
                    Copy Results
                </button>
            </div>
            <div id="results-container" class="space-y-4">
                <!-- Results will be injected here -->
            </div>
        </div>

        <div id="loading-spinner" class="mt-6 text-center hidden">
            <div class="animate-spin rounded-full h-10 w-10 border-4 border-t-4 border-indigo-500 border-gray-200 mx-auto"></div>
            <p class="mt-2 text-gray-500">Checking status...</p>
        </div>
    </div>

    <script>
        // Set up Firebase configuration and authentication variables
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // Custom function to show messages instead of alert()
        const showMessage = (message, type = 'error') => {
            const messageBox = document.getElementById('message-box');
            messageBox.textContent = message;
            messageBox.classList.remove('hidden', 'bg-red-100', 'text-red-800', 'bg-green-100', 'text-green-800');
            if (type === 'error') {
                messageBox.classList.add('bg-red-100', 'text-red-800');
            } else {
                messageBox.classList.add('bg-green-100', 'text-green-800');
            }
        };

        // This function now simulates a call to a backend server.
        // In a real application, this 'fetch' call would point to your own server endpoint.
        async function getTrackingStatus(trackingNumber) {
            try {
                // Placeholder URL for a hypothetical backend endpoint
                const backendUrl = 'https://your-backend-server.com/api/track'; 

                // We're simulating a POST request to a backend that would handle the API call
                const response = await fetch(backendUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ trackingNumber: trackingNumber })
                });

                // Since we don't have a real backend, we'll return a fake status for now.
                // In the real version, you would parse the JSON from the 'response' object.
                const statuses = ['Delivered', 'In Transit', 'Delivery Exception'];
                const status = statuses[Math.floor(Math.random() * statuses.length)];
                const isDelivered = status === 'Delivered';

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const deliveryDate = isDelivered ? 'August 7, 2025' : 'N/A';
                return {
                    trackingNumber,
                    status,
                    deliveryDate
                };

            } catch (error) {
                console.error('Error fetching tracking status:', error);
                return { trackingNumber, status: 'Error', deliveryDate: 'N/A' };
            }
        }

        async function checkStatuses() {
            const textarea = document.getElementById('trackingNumbers');
            const trackingNumbers = textarea.value.trim().split('\n').map(num => num.trim()).filter(num => num !== '');
            const resultsDiv = document.getElementById('results');
            const resultsContainer = document.getElementById('results-container');
            const loadingSpinner = document.getElementById('loading-spinner');
            const messageBox = document.getElementById('message-box');

            resultsDiv.classList.add('hidden');
            loadingSpinner.classList.add('hidden');
            messageBox.classList.add('hidden');
            resultsContainer.innerHTML = '';

            if (trackingNumbers.length === 0) {
                showMessage('Please enter at least one tracking number.', 'error');
                return;
            }

            loadingSpinner.classList.remove('hidden');
            const results = await Promise.all(trackingNumbers.map(getTrackingStatus));
            loadingSpinner.classList.add('hidden');
            resultsDiv.classList.remove('hidden');

            const allDelivered = results.every(result => result.status === 'Delivered');

            results.forEach(result => {
                const statusColor = result.status === 'Delivered' ? 'bg-green-100 text-green-800' :
                                    result.status === 'In Transit' ? 'bg-blue-100 text-blue-800' :
                                    'bg-red-100 text-red-800';

                const resultHtml = `
                    <div class="p-4 rounded-lg shadow-sm border border-gray-200">
                        <div class="flex items-center justify-between">
                            <span class="font-medium text-gray-700">Tracking #${result.trackingNumber}</span>
                            <span class="text-sm font-semibold px-2 py-1 rounded-full ${statusColor}">${result.status}</span>
                        </div>
                        <p class="text-sm text-gray-500 mt-1">Delivery Date: ${result.deliveryDate}</p>
                    </div>
                `;
                resultsContainer.innerHTML += resultHtml;
            });

            if (allDelivered) {
                showMessage('All packages have been delivered!', 'success');
            }
        }

        function copyResults() {
            const resultsContainer = document.getElementById('results-container');
            const resultText = resultsContainer.innerText;

            if (resultText) {
                const tempTextarea = document.createElement('textarea');
                tempTextarea.value = resultText;
                document.body.appendChild(tempTextarea);
                tempTextarea.select();
                document.execCommand('copy');
                document.body.removeChild(tempTextarea);
                showMessage('Results copied to clipboard!', 'success');
            } else {
                showMessage('No results to copy.', 'error');
            }
        }

        document.getElementById('checkButton').addEventListener('click', checkStatuses);
        document.getElementById('copyButton').addEventListener('click', copyResults);
    </script>
</body>
</html>
